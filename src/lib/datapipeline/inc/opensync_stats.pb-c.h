/*
Copyright (c) 2015, Plume Design Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the Plume Design Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: opensync_stats.proto */

#ifndef PROTOBUF_C_opensync_5fstats_2eproto__INCLUDED
#define PROTOBUF_C_opensync_5fstats_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Sts__AvgType Sts__AvgType;
typedef struct _Sts__AvgTypeSigned Sts__AvgTypeSigned;
typedef struct _Sts__Neighbor Sts__Neighbor;
typedef struct _Sts__Neighbor__NeighborBss Sts__Neighbor__NeighborBss;
typedef struct _Sts__Client Sts__Client;
typedef struct _Sts__Client__Stats Sts__Client__Stats;
typedef struct _Sts__Client__RxStats Sts__Client__RxStats;
typedef struct _Sts__Client__RxStats__ChainRSSI Sts__Client__RxStats__ChainRSSI;
typedef struct _Sts__Client__TxStats Sts__Client__TxStats;
typedef struct _Sts__Client__TidStats Sts__Client__TidStats;
typedef struct _Sts__Client__TidStats__Sojourn Sts__Client__TidStats__Sojourn;
typedef struct _Sts__ClientReport Sts__ClientReport;
typedef struct _Sts__Survey Sts__Survey;
typedef struct _Sts__Survey__SurveySample Sts__Survey__SurveySample;
typedef struct _Sts__Survey__SurveyAvg Sts__Survey__SurveyAvg;
typedef struct _Sts__Capacity Sts__Capacity;
typedef struct _Sts__Capacity__QueueSample Sts__Capacity__QueueSample;
typedef struct _Sts__Device Sts__Device;
typedef struct _Sts__Device__LoadAvg Sts__Device__LoadAvg;
typedef struct _Sts__Device__RadioTemp Sts__Device__RadioTemp;
typedef struct _Sts__Device__Thermal Sts__Device__Thermal;
typedef struct _Sts__Device__Thermal__RadioTxChainMask Sts__Device__Thermal__RadioTxChainMask;
typedef struct _Sts__Device__MemUtil Sts__Device__MemUtil;
typedef struct _Sts__Device__FsUtil Sts__Device__FsUtil;
typedef struct _Sts__Device__CpuUtil Sts__Device__CpuUtil;
typedef struct _Sts__Device__PerProcessUtil Sts__Device__PerProcessUtil;
typedef struct _Sts__BSClient Sts__BSClient;
typedef struct _Sts__BSClient__BSEvent Sts__BSClient__BSEvent;
typedef struct _Sts__BSClient__BSBandReport Sts__BSClient__BSBandReport;
typedef struct _Sts__BSReport Sts__BSReport;
typedef struct _Sts__RssiPeer Sts__RssiPeer;
typedef struct _Sts__RssiPeer__RssiSample Sts__RssiPeer__RssiSample;
typedef struct _Sts__RssiReport Sts__RssiReport;
typedef struct _Sts__Report Sts__Report;


/* --- enums --- */

typedef enum _Sts__RssiPeer__RssiSource {
  STS__RSSI_PEER__RSSI_SOURCE__CLIENT = 0,
  STS__RSSI_PEER__RSSI_SOURCE__PROBE = 1,
  STS__RSSI_PEER__RSSI_SOURCE__NEIGHBOR = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__RSSI_PEER__RSSI_SOURCE)
} Sts__RssiPeer__RssiSource;
typedef enum _Sts__RadioBandType {
  STS__RADIO_BAND_TYPE__BAND2G = 0,
  STS__RADIO_BAND_TYPE__BAND5G = 1,
  STS__RADIO_BAND_TYPE__BAND5GL = 2,
  STS__RADIO_BAND_TYPE__BAND5GU = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__RADIO_BAND_TYPE)
} Sts__RadioBandType;
typedef enum _Sts__SurveyType {
  STS__SURVEY_TYPE__ON_CHANNEL = 0,
  STS__SURVEY_TYPE__OFF_CHANNEL = 1,
  STS__SURVEY_TYPE__FULL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__SURVEY_TYPE)
} Sts__SurveyType;
typedef enum _Sts__NeighborType {
  STS__NEIGHBOR_TYPE__ONCHAN_SCAN = 0,
  STS__NEIGHBOR_TYPE__OFFCHAN_SCAN = 1,
  STS__NEIGHBOR_TYPE__FULL_SCAN = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__NEIGHBOR_TYPE)
} Sts__NeighborType;
typedef enum _Sts__ChanWidth {
  STS__CHAN_WIDTH__CHAN_WIDTH_UNKNOWN = 0,
  STS__CHAN_WIDTH__CHAN_WIDTH_20MHZ = 1,
  STS__CHAN_WIDTH__CHAN_WIDTH_40MHZ = 2,
  STS__CHAN_WIDTH__CHAN_WIDTH_40MHZ_ABOVE = 3,
  STS__CHAN_WIDTH__CHAN_WIDTH_40MHZ_BELOW = 4,
  STS__CHAN_WIDTH__CHAN_WIDTH_80MHZ = 5,
  STS__CHAN_WIDTH__CHAN_WIDTH_160MHZ = 6,
  STS__CHAN_WIDTH__CHAN_WIDTH_80_PLUS_80MHZ = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__CHAN_WIDTH)
} Sts__ChanWidth;
typedef enum _Sts__WmmAc {
  STS__WMM_AC__WMM_AC_VO = 1,
  STS__WMM_AC__WMM_AC_VI = 2,
  STS__WMM_AC__WMM_AC_BE = 3,
  STS__WMM_AC__WMM_AC_BK = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__WMM_AC)
} Sts__WmmAc;
typedef enum _Sts__BSEventType {
  STS__BSEVENT_TYPE__PROBE = 0,
  STS__BSEVENT_TYPE__CONNECT = 1,
  STS__BSEVENT_TYPE__DISCONNECT = 2,
  STS__BSEVENT_TYPE__BACKOFF = 3,
  STS__BSEVENT_TYPE__ACTIVITY = 4,
  STS__BSEVENT_TYPE__OVERRUN = 5,
  STS__BSEVENT_TYPE__BAND_STEERING_ATTEMPT = 6,
  STS__BSEVENT_TYPE__CLIENT_STEERING_ATTEMPT = 7,
  STS__BSEVENT_TYPE__CLIENT_STEERING_STARTED = 8,
  STS__BSEVENT_TYPE__CLIENT_STEERING_DISABLED = 9,
  STS__BSEVENT_TYPE__CLIENT_STEERING_EXPIRED = 10,
  STS__BSEVENT_TYPE__CLIENT_STEERING_FAILED = 11,
  STS__BSEVENT_TYPE__AUTH_BLOCK = 12,
  STS__BSEVENT_TYPE__CLIENT_KICKED = 13,
  STS__BSEVENT_TYPE__CLIENT_BS_BTM = 14,
  STS__BSEVENT_TYPE__CLIENT_STICKY_BTM = 15,
  STS__BSEVENT_TYPE__CLIENT_BTM = 16,
  STS__BSEVENT_TYPE__CLIENT_CAPABILITIES = 17,
  STS__BSEVENT_TYPE__CLIENT_BS_BTM_RETRY = 18,
  STS__BSEVENT_TYPE__CLIENT_STICKY_BTM_RETRY = 19,
  STS__BSEVENT_TYPE__CLIENT_BTM_RETRY = 20,
  STS__BSEVENT_TYPE__CLIENT_RRM_BCN_RPT = 21,
  STS__BSEVENT_TYPE__CLIENT_BS_KICK = 22,
  STS__BSEVENT_TYPE__CLIENT_STICKY_KICK = 23,
  STS__BSEVENT_TYPE__CLIENT_SPECULATIVE_KICK = 24,
  STS__BSEVENT_TYPE__CLIENT_DIRECTED_KICK = 25,
  STS__BSEVENT_TYPE__CLIENT_GHOST_DEVICE_KICK = 26
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__BSEVENT_TYPE)
} Sts__BSEventType;
typedef enum _Sts__DisconnectSrc {
  STS__DISCONNECT_SRC__LOCAL = 0,
  STS__DISCONNECT_SRC__REMOTE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__DISCONNECT_SRC)
} Sts__DisconnectSrc;
typedef enum _Sts__DisconnectType {
  STS__DISCONNECT_TYPE__DISASSOC = 0,
  STS__DISCONNECT_TYPE__DEAUTH = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__DISCONNECT_TYPE)
} Sts__DisconnectType;
typedef enum _Sts__ReportType {
  STS__REPORT_TYPE__RAW = 0,
  STS__REPORT_TYPE__AVERAGE = 1,
  STS__REPORT_TYPE__HISTOGRAM = 2,
  STS__REPORT_TYPE__PERCENTILE = 3,
  STS__REPORT_TYPE__DIFF = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__REPORT_TYPE)
} Sts__ReportType;
typedef enum _Sts__FsType {
  STS__FS_TYPE__FS_TYPE_ROOTFS = 0,
  STS__FS_TYPE__FS_TYPE_TMPFS = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__FS_TYPE)
} Sts__FsType;
typedef enum _Sts__DiffType {
  STS__DIFF_TYPE__ADDED = 0,
  STS__DIFF_TYPE__REMOVED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STS__DIFF_TYPE)
} Sts__DiffType;

/* --- messages --- */

struct  _Sts__AvgType
{
  ProtobufCMessage base;
  uint32_t avg;
  protobuf_c_boolean has_min;
  uint32_t min;
  protobuf_c_boolean has_max;
  uint32_t max;
  protobuf_c_boolean has_num;
  uint32_t num;
};
#define STS__AVG_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__avg_type__descriptor) \
    , 0, 0,0, 0,0, 0,0 }


struct  _Sts__AvgTypeSigned
{
  ProtobufCMessage base;
  int32_t avg;
  protobuf_c_boolean has_min;
  int32_t min;
  protobuf_c_boolean has_max;
  int32_t max;
  protobuf_c_boolean has_num;
  uint32_t num;
};
#define STS__AVG_TYPE_SIGNED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__avg_type_signed__descriptor) \
    , 0, 0,0, 0,0, 0,0 }


struct  _Sts__Neighbor__NeighborBss
{
  ProtobufCMessage base;
  char *bssid;
  char *ssid;
  protobuf_c_boolean has_rssi;
  uint32_t rssi;
  protobuf_c_boolean has_tsf;
  uint64_t tsf;
  protobuf_c_boolean has_chan_width;
  Sts__ChanWidth chan_width;
  uint32_t channel;
  protobuf_c_boolean has_status;
  Sts__DiffType status;
};
#define STS__NEIGHBOR__NEIGHBOR_BSS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__neighbor__neighbor_bss__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0, 0,0 }


/*
 * //////////////////////////////////////////////////////////////////////////////
 * Neighbor report: Report contains OBSS neighbor nodes/beacons retreived from
 * scanning:
 * - off-chan   : neighbors retreived from scanning foreingh selected channels 
 * - on-chan    : neighbors retreived from home channel 
 * - full       : neighbors retreived from all channels current regulatory domain
 * //////////////////////////////////////////////////////////////////////////////
 */
struct  _Sts__Neighbor
{
  ProtobufCMessage base;
  Sts__RadioBandType band;
  Sts__NeighborType scan_type;
  protobuf_c_boolean has_timestamp_ms;
  uint64_t timestamp_ms;
  size_t n_bss_list;
  Sts__Neighbor__NeighborBss **bss_list;
  protobuf_c_boolean has_report_type;
  Sts__ReportType report_type;
};
#define STS__NEIGHBOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__neighbor__descriptor) \
    , 0, 0, 0,0, 0,NULL, 0,0 }


struct  _Sts__Client__Stats
{
  ProtobufCMessage base;
  protobuf_c_boolean has_rx_bytes;
  uint64_t rx_bytes;
  protobuf_c_boolean has_tx_bytes;
  uint64_t tx_bytes;
  protobuf_c_boolean has_rx_frames;
  uint64_t rx_frames;
  protobuf_c_boolean has_tx_frames;
  uint64_t tx_frames;
  protobuf_c_boolean has_rx_retries;
  uint64_t rx_retries;
  protobuf_c_boolean has_tx_retries;
  uint64_t tx_retries;
  protobuf_c_boolean has_rx_errors;
  uint64_t rx_errors;
  protobuf_c_boolean has_tx_errors;
  uint64_t tx_errors;
  /*
   * best-effort report of SU capacity, mbps 
   */
  protobuf_c_boolean has_rx_rate;
  double rx_rate;
  /*
   * best-effort report of SU capacity, mbps 
   */
  protobuf_c_boolean has_tx_rate;
  double tx_rate;
  protobuf_c_boolean has_rssi;
  uint32_t rssi;
  /*
   * accounts mixed SU+MU, mbps 
   */
  protobuf_c_boolean has_rx_rate_perceived;
  double rx_rate_perceived;
  /*
   * accounts mixed SU+MU, mbps 
   */
  protobuf_c_boolean has_tx_rate_perceived;
  double tx_rate_perceived;
};
#define STS__CLIENT__STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__client__stats__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Sts__Client__RxStats__ChainRSSI
{
  ProtobufCMessage base;
  uint32_t chain;
  /*
   * pri20(20MHz), sec20(40MHz), sec40(80MHz), sec80(160MHz) 
   */
  uint32_t ht;
  protobuf_c_boolean has_rssi;
  uint32_t rssi;
};
#define STS__CLIENT__RX_STATS__CHAIN_RSSI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__client__rx_stats__chain_rssi__descriptor) \
    , 0, 0, 0,0 }


struct  _Sts__Client__RxStats
{
  ProtobufCMessage base;
  uint32_t mcs;
  uint32_t nss;
  uint32_t bw;
  protobuf_c_boolean has_bytes;
  uint64_t bytes;
  protobuf_c_boolean has_msdus;
  uint64_t msdus;
  protobuf_c_boolean has_mpdus;
  uint64_t mpdus;
  protobuf_c_boolean has_ppdus;
  uint64_t ppdus;
  protobuf_c_boolean has_retries;
  uint64_t retries;
  protobuf_c_boolean has_errors;
  uint64_t errors;
  protobuf_c_boolean has_rssi;
  uint32_t rssi;
  size_t n_chain_rssi;
  Sts__Client__RxStats__ChainRSSI **chain_rssi;
};
#define STS__CLIENT__RX_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__client__rx_stats__descriptor) \
    , 0, 0, 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _Sts__Client__TxStats
{
  ProtobufCMessage base;
  uint32_t mcs;
  uint32_t nss;
  uint32_t bw;
  protobuf_c_boolean has_bytes;
  uint64_t bytes;
  protobuf_c_boolean has_msdus;
  uint64_t msdus;
  protobuf_c_boolean has_mpdus;
  uint64_t mpdus;
  protobuf_c_boolean has_ppdus;
  uint64_t ppdus;
  protobuf_c_boolean has_retries;
  uint64_t retries;
  protobuf_c_boolean has_errors;
  uint64_t errors;
};
#define STS__CLIENT__TX_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__client__tx_stats__descriptor) \
    , 0, 0, 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Sts__Client__TidStats__Sojourn
{
  ProtobufCMessage base;
  /*
   * Acess category 
   */
  Sts__WmmAc ac;
  /*
   * Traffic identifier queue number 
   */
  uint32_t tid;
  /*
   * Moving average value based on last couple of transmitted msdus 
   */
  protobuf_c_boolean has_ewma_time_ms;
  uint32_t ewma_time_ms;
  /*
   * Delta of cumulative msdus times over interval 
   */
  protobuf_c_boolean has_sum_time_ms;
  uint32_t sum_time_ms;
  /*
   * Number of msdus in given interval 
   */
  protobuf_c_boolean has_num_msdus;
  uint32_t num_msdus;
};
#define STS__CLIENT__TID_STATS__SOJOURN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__client__tid_stats__sojourn__descriptor) \
    , 0, 0, 0,0, 0,0, 0,0 }


struct  _Sts__Client__TidStats
{
  ProtobufCMessage base;
  size_t n_sojourn;
  Sts__Client__TidStats__Sojourn **sojourn;
  protobuf_c_boolean has_offset_ms;
  uint32_t offset_ms;
};
#define STS__CLIENT__TID_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__client__tid_stats__descriptor) \
    , 0,NULL, 0,0 }


/*
 * //////////////////////////////////////////////////////////////////////////////
 * Client report: Report contains rx and tx stats for a single station
 * - Average stats  : Averaged rx and tx stats
 * - Extended stats : Detailed MCS, NSS and BW stats for tx and rx 
 * //////////////////////////////////////////////////////////////////////////////
 */
struct  _Sts__Client
{
  ProtobufCMessage base;
  char *mac_address;
  char *ssid;
  protobuf_c_boolean has_connected;
  protobuf_c_boolean connected;
  protobuf_c_boolean has_connect_count;
  uint32_t connect_count;
  protobuf_c_boolean has_disconnect_count;
  uint32_t disconnect_count;
  protobuf_c_boolean has_connect_offset_ms;
  uint32_t connect_offset_ms;
  protobuf_c_boolean has_disconnect_offset_ms;
  uint32_t disconnect_offset_ms;
  protobuf_c_boolean has_duration_ms;
  uint32_t duration_ms;
  Sts__Client__Stats *stats;
  size_t n_rx_stats;
  Sts__Client__RxStats **rx_stats;
  size_t n_tx_stats;
  Sts__Client__TxStats **tx_stats;
  size_t n_tid_stats;
  Sts__Client__TidStats **tid_stats;
  protobuf_c_boolean has_uapsd;
  uint32_t uapsd;
};
#define STS__CLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__client__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,NULL, 0,NULL, 0,NULL, 0,0 }


struct  _Sts__ClientReport
{
  ProtobufCMessage base;
  Sts__RadioBandType band;
  protobuf_c_boolean has_timestamp_ms;
  uint64_t timestamp_ms;
  size_t n_client_list;
  Sts__Client **client_list;
  uint32_t channel;
};
#define STS__CLIENT_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__client_report__descriptor) \
    , 0, 0,0, 0,NULL, 0 }


struct  _Sts__Survey__SurveySample
{
  ProtobufCMessage base;
  uint32_t channel;
  protobuf_c_boolean has_duration_ms;
  uint32_t duration_ms;
  protobuf_c_boolean has_total_count;
  uint32_t total_count;
  protobuf_c_boolean has_sample_count;
  uint32_t sample_count;
  /*
   * Busy = Rx + Tx + Interference 
   */
  protobuf_c_boolean has_busy;
  uint32_t busy;
  /*
   * Tx 
   */
  protobuf_c_boolean has_busy_tx;
  uint32_t busy_tx;
  /*
   * Rx = Rx_obss + Rx_errr (self and obss errors) 
   */
  protobuf_c_boolean has_busy_rx;
  uint32_t busy_rx;
  /*
   * Rx_self (derived from succesful Rx frames)
   */
  protobuf_c_boolean has_busy_self;
  uint32_t busy_self;
  protobuf_c_boolean has_offset_ms;
  uint32_t offset_ms;
  /*
   * 40MHz extention channel busy 
   */
  protobuf_c_boolean has_busy_ext;
  uint32_t busy_ext;
  /*
   * dBm 
   */
  protobuf_c_boolean has_noise_floor;
  int32_t noise_floor;
};
#define STS__SURVEY__SURVEY_SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__survey__survey_sample__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Sts__Survey__SurveyAvg
{
  ProtobufCMessage base;
  uint32_t channel;
  /*
   * Busy = Rx + Tx + Interference 
   */
  Sts__AvgType *busy;
  /*
   * Tx 
   */
  Sts__AvgType *busy_tx;
  /*
   * Rx = Rx_obss + Rx_errr (self and obss errors) 
   */
  Sts__AvgType *busy_rx;
  /*
   * Rx_self (derived from succesful Rx frames)
   */
  Sts__AvgType *busy_self;
  /*
   * 40MHz extention channel busy 
   */
  Sts__AvgType *busy_ext;
  /*
   * dBm 
   */
  Sts__AvgTypeSigned *noise_floor;
};
#define STS__SURVEY__SURVEY_AVG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__survey__survey_avg__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * //////////////////////////////////////////////////////////////////////////////
 * Survey report : Chanel utilization. Report contains samples 
 * error rxbusy and obssbussy represent rx samples that were errorenous where:
 * - rxbusy is rx time with decoded BSSIS
 * - obssbusy is the time from the undecoded rx error samples
 * //////////////////////////////////////////////////////////////////////////////
 */
struct  _Sts__Survey
{
  ProtobufCMessage base;
  Sts__RadioBandType band;
  Sts__SurveyType survey_type;
  protobuf_c_boolean has_timestamp_ms;
  uint64_t timestamp_ms;
  size_t n_survey_list;
  Sts__Survey__SurveySample **survey_list;
  size_t n_survey_avg;
  Sts__Survey__SurveyAvg **survey_avg;
  protobuf_c_boolean has_report_type;
  Sts__ReportType report_type;
};
#define STS__SURVEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__survey__descriptor) \
    , 0, 0, 0,0, 0,NULL, 0,NULL, 0,0 }


struct  _Sts__Capacity__QueueSample
{
  ProtobufCMessage base;
  protobuf_c_boolean has_busy_tx;
  uint32_t busy_tx;
  protobuf_c_boolean has_bytes_tx;
  uint32_t bytes_tx;
  protobuf_c_boolean has_sample_count;
  uint32_t sample_count;
  /*
   * Video 
   */
  protobuf_c_boolean has_vo_count;
  uint32_t vo_count;
  /*
   * Voice 
   */
  protobuf_c_boolean has_vi_count;
  uint32_t vi_count;
  /*
   * Best Effort 
   */
  protobuf_c_boolean has_be_count;
  uint32_t be_count;
  /*
   * Background 
   */
  protobuf_c_boolean has_bk_count;
  uint32_t bk_count;
  /*
   * Beacon 
   */
  protobuf_c_boolean has_bcn_count;
  uint32_t bcn_count;
  /*
   * Content After Beacon 
   */
  protobuf_c_boolean has_cab_count;
  uint32_t cab_count;
  protobuf_c_boolean has_offset_ms;
  uint32_t offset_ms;
};
#define STS__CAPACITY__QUEUE_SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__capacity__queue_sample__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * //////////////////////////////////////////////////////////////////////////////
 * Capacity report : Tx sampling of queues (MAC) and survey (PHY) samples
 * //////////////////////////////////////////////////////////////////////////////
 */
struct  _Sts__Capacity
{
  ProtobufCMessage base;
  Sts__RadioBandType band;
  protobuf_c_boolean has_timestamp_ms;
  uint64_t timestamp_ms;
  size_t n_queue_list;
  Sts__Capacity__QueueSample **queue_list;
};
#define STS__CAPACITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__capacity__descriptor) \
    , 0, 0,0, 0,NULL }


struct  _Sts__Device__LoadAvg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_one;
  double one;
  protobuf_c_boolean has_five;
  double five;
  protobuf_c_boolean has_fifteen;
  double fifteen;
};
#define STS__DEVICE__LOAD_AVG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__device__load_avg__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Sts__Device__RadioTemp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_band;
  Sts__RadioBandType band;
  protobuf_c_boolean has_value;
  int32_t value;
};
#define STS__DEVICE__RADIO_TEMP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__device__radio_temp__descriptor) \
    , 0,0, 0,0 }


struct  _Sts__Device__Thermal__RadioTxChainMask
{
  ProtobufCMessage base;
  protobuf_c_boolean has_band;
  Sts__RadioBandType band;
  protobuf_c_boolean has_value;
  uint32_t value;
};
#define STS__DEVICE__THERMAL__RADIO_TX_CHAIN_MASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__device__thermal__radio_tx_chain_mask__descriptor) \
    , 0,0, 0,0 }


struct  _Sts__Device__Thermal
{
  ProtobufCMessage base;
  size_t n_txchainmask;
  Sts__Device__Thermal__RadioTxChainMask **txchainmask;
  protobuf_c_boolean has_fan_rpm;
  uint32_t fan_rpm;
  protobuf_c_boolean has_timestamp_ms;
  uint64_t timestamp_ms;
};
#define STS__DEVICE__THERMAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__device__thermal__descriptor) \
    , 0,NULL, 0,0, 0,0 }


/*
 * Memory utilization: [kB]
 */
struct  _Sts__Device__MemUtil
{
  ProtobufCMessage base;
  uint32_t mem_total;
  uint32_t mem_used;
  protobuf_c_boolean has_swap_total;
  uint32_t swap_total;
  protobuf_c_boolean has_swap_used;
  uint32_t swap_used;
};
#define STS__DEVICE__MEM_UTIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__device__mem_util__descriptor) \
    , 0, 0, 0,0, 0,0 }


/*
 * Filesystem utilization per FS-type: [kB]
 */
struct  _Sts__Device__FsUtil
{
  ProtobufCMessage base;
  Sts__FsType fs_type;
  uint32_t fs_total;
  uint32_t fs_used;
};
#define STS__DEVICE__FS_UTIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__device__fs_util__descriptor) \
    , 0, 0, 0 }


/*
 * CPU utilization: [percent]:
 */
struct  _Sts__Device__CpuUtil
{
  ProtobufCMessage base;
  protobuf_c_boolean has_cpu_util;
  uint32_t cpu_util;
};
#define STS__DEVICE__CPU_UTIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__device__cpu_util__descriptor) \
    , 0,0 }


/*
 * Per-process CPU/MEM utilization:
 */
struct  _Sts__Device__PerProcessUtil
{
  ProtobufCMessage base;
  uint32_t pid;
  char *cmd;
  /*
   * for cpu: [%CPU] [0..100]; for mem: [kB]  
   */
  uint32_t util;
};
#define STS__DEVICE__PER_PROCESS_UTIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__device__per_process_util__descriptor) \
    , 0, NULL, 0 }


/*
 * //////////////////////////////////////////////////////////////////////////////
 * Device status report
 * //////////////////////////////////////////////////////////////////////////////
 */
struct  _Sts__Device
{
  ProtobufCMessage base;
  Sts__Device__LoadAvg *load;
  size_t n_radio_temp;
  Sts__Device__RadioTemp **radio_temp;
  protobuf_c_boolean has_timestamp_ms;
  uint64_t timestamp_ms;
  protobuf_c_boolean has_uptime;
  uint32_t uptime;
  size_t n_thermal_stats;
  Sts__Device__Thermal **thermal_stats;
  Sts__Device__MemUtil *mem_util;
  size_t n_fs_util;
  Sts__Device__FsUtil **fs_util;
  Sts__Device__CpuUtil *cpuutil;
  /*
   * top / most CPU/MEM consuming processes:
   */
  size_t n_ps_cpu_util;
  Sts__Device__PerProcessUtil **ps_cpu_util;
  size_t n_ps_mem_util;
  Sts__Device__PerProcessUtil **ps_mem_util;
};
#define STS__DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__device__descriptor) \
    , NULL, 0,NULL, 0,0, 0,0, 0,NULL, NULL, 0,NULL, NULL, 0,NULL, 0,NULL }


struct  _Sts__BSClient__BSEvent
{
  ProtobufCMessage base;
  Sts__BSEventType type;
  uint32_t offset_ms;
  protobuf_c_boolean has_rssi;
  uint32_t rssi;
  protobuf_c_boolean has_probe_bcast;
  protobuf_c_boolean probe_bcast;
  protobuf_c_boolean has_probe_blocked;
  protobuf_c_boolean probe_blocked;
  protobuf_c_boolean has_disconnect_src;
  Sts__DisconnectSrc disconnect_src;
  protobuf_c_boolean has_disconnect_type;
  Sts__DisconnectType disconnect_type;
  protobuf_c_boolean has_disconnect_reason;
  uint32_t disconnect_reason;
  protobuf_c_boolean has_backoff_enabled;
  protobuf_c_boolean backoff_enabled;
  protobuf_c_boolean has_active;
  protobuf_c_boolean active;
  protobuf_c_boolean has_rejected;
  protobuf_c_boolean rejected;
  protobuf_c_boolean has_is_btm_supported;
  protobuf_c_boolean is_btm_supported;
  protobuf_c_boolean has_is_rrm_supported;
  protobuf_c_boolean is_rrm_supported;
  protobuf_c_boolean has_max_chwidth;
  uint32_t max_chwidth;
  protobuf_c_boolean has_max_streams;
  uint32_t max_streams;
  protobuf_c_boolean has_phy_mode;
  uint32_t phy_mode;
  protobuf_c_boolean has_max_mcs;
  uint32_t max_mcs;
  protobuf_c_boolean has_max_txpower;
  uint32_t max_txpower;
  protobuf_c_boolean has_is_static_smps;
  protobuf_c_boolean is_static_smps;
  protobuf_c_boolean has_is_mu_mimo_supported;
  protobuf_c_boolean is_mu_mimo_supported;
  protobuf_c_boolean has_band_cap_2g;
  protobuf_c_boolean band_cap_2g;
  protobuf_c_boolean has_band_cap_5g;
  protobuf_c_boolean band_cap_5g;
  protobuf_c_boolean has_rrm_caps_link_meas;
  protobuf_c_boolean rrm_caps_link_meas;
  protobuf_c_boolean has_rrm_caps_neigh_rpt;
  protobuf_c_boolean rrm_caps_neigh_rpt;
  protobuf_c_boolean has_rrm_caps_bcn_rpt_passive;
  protobuf_c_boolean rrm_caps_bcn_rpt_passive;
  protobuf_c_boolean has_rrm_caps_bcn_rpt_active;
  protobuf_c_boolean rrm_caps_bcn_rpt_active;
  protobuf_c_boolean has_rrm_caps_bcn_rpt_table;
  protobuf_c_boolean rrm_caps_bcn_rpt_table;
  protobuf_c_boolean has_rrm_caps_lci_meas;
  protobuf_c_boolean rrm_caps_lci_meas;
  protobuf_c_boolean has_rrm_caps_ftm_range_rpt;
  protobuf_c_boolean rrm_caps_ftm_range_rpt;
  protobuf_c_boolean has_backoff_period;
  uint32_t backoff_period;
  protobuf_c_boolean has_assoc_ies;
  ProtobufCBinaryData assoc_ies;
};
#define STS__BSCLIENT__BSEVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__bsclient__bsevent__descriptor) \
    , 0, 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL} }


struct  _Sts__BSClient__BSBandReport
{
  ProtobufCMessage base;
  Sts__RadioBandType band;
  protobuf_c_boolean has_connected;
  protobuf_c_boolean connected;
  protobuf_c_boolean has_rejects;
  uint32_t rejects;
  protobuf_c_boolean has_connects;
  uint32_t connects;
  protobuf_c_boolean has_disconnects;
  uint32_t disconnects;
  protobuf_c_boolean has_activity_changes;
  uint32_t activity_changes;
  protobuf_c_boolean has_steering_success_cnt;
  uint32_t steering_success_cnt;
  protobuf_c_boolean has_steering_fail_cnt;
  uint32_t steering_fail_cnt;
  protobuf_c_boolean has_steering_kick_cnt;
  uint32_t steering_kick_cnt;
  protobuf_c_boolean has_sticky_kick_cnt;
  uint32_t sticky_kick_cnt;
  protobuf_c_boolean has_probe_bcast_cnt;
  uint32_t probe_bcast_cnt;
  protobuf_c_boolean has_probe_bcast_blocked;
  uint32_t probe_bcast_blocked;
  protobuf_c_boolean has_probe_direct_cnt;
  uint32_t probe_direct_cnt;
  protobuf_c_boolean has_probe_direct_blocked;
  uint32_t probe_direct_blocked;
  size_t n_event_list;
  Sts__BSClient__BSEvent **event_list;
  char *ifname;
};
#define STS__BSCLIENT__BSBAND_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__bsclient__bsband_report__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, NULL }


/*
 * //////////////////////////////////////////////////////////////////////////////
 * Band Steering Client report
 * 
 * - Contains band steering stats per client per station 
 * //////////////////////////////////////////////////////////////////////////////
 */
struct  _Sts__BSClient
{
  ProtobufCMessage base;
  char *mac_address;
  size_t n_bs_band_report;
  Sts__BSClient__BSBandReport **bs_band_report;
};
#define STS__BSCLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__bsclient__descriptor) \
    , NULL, 0,NULL }


struct  _Sts__BSReport
{
  ProtobufCMessage base;
  uint64_t timestamp_ms;
  size_t n_clients;
  Sts__BSClient **clients;
};
#define STS__BSREPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__bsreport__descriptor) \
    , 0, 0,NULL }


struct  _Sts__RssiPeer__RssiSample
{
  ProtobufCMessage base;
  uint32_t rssi;
  protobuf_c_boolean has_offset_ms;
  uint32_t offset_ms;
};
#define STS__RSSI_PEER__RSSI_SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__rssi_peer__rssi_sample__descriptor) \
    , 0, 0,0 }


/*
 * //////////////////////////////////////////////////////////////////////////////
 * Band Steering Client report
 * 
 * - Contains band steering stats per client per station 
 * //////////////////////////////////////////////////////////////////////////////
 */
struct  _Sts__RssiPeer
{
  ProtobufCMessage base;
  char *mac_address;
  protobuf_c_boolean has_rssi_source;
  Sts__RssiPeer__RssiSource rssi_source;
  size_t n_rssi_list;
  Sts__RssiPeer__RssiSample **rssi_list;
  Sts__AvgType *rssi_avg;
  protobuf_c_boolean has_rx_ppdus;
  uint64_t rx_ppdus;
  protobuf_c_boolean has_tx_ppdus;
  uint64_t tx_ppdus;
};
#define STS__RSSI_PEER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__rssi_peer__descriptor) \
    , NULL, 0,0, 0,NULL, NULL, 0,0, 0,0 }


struct  _Sts__RssiReport
{
  ProtobufCMessage base;
  Sts__RadioBandType band;
  Sts__ReportType report_type;
  protobuf_c_boolean has_timestamp_ms;
  uint64_t timestamp_ms;
  size_t n_peer_list;
  Sts__RssiPeer **peer_list;
};
#define STS__RSSI_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__rssi_report__descriptor) \
    , 0, 0, 0,0, 0,NULL }


/*
 * //////////////////////////////////////////////////////////////////////////////
 * Overall report that might contain all individual stats reports
 * //////////////////////////////////////////////////////////////////////////////
 */
struct  _Sts__Report
{
  ProtobufCMessage base;
  char *nodeid;
  size_t n_survey;
  Sts__Survey **survey;
  size_t n_capacity;
  Sts__Capacity **capacity;
  size_t n_neighbors;
  Sts__Neighbor **neighbors;
  size_t n_clients;
  Sts__ClientReport **clients;
  size_t n_device;
  Sts__Device **device;
  size_t n_bs_report;
  Sts__BSReport **bs_report;
  size_t n_rssi_report;
  Sts__RssiReport **rssi_report;
};
#define STS__REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__report__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/* Sts__AvgType methods */
void   sts__avg_type__init
                     (Sts__AvgType         *message);
size_t sts__avg_type__get_packed_size
                     (const Sts__AvgType   *message);
size_t sts__avg_type__pack
                     (const Sts__AvgType   *message,
                      uint8_t             *out);
size_t sts__avg_type__pack_to_buffer
                     (const Sts__AvgType   *message,
                      ProtobufCBuffer     *buffer);
Sts__AvgType *
       sts__avg_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__avg_type__free_unpacked
                     (Sts__AvgType *message,
                      ProtobufCAllocator *allocator);
/* Sts__AvgTypeSigned methods */
void   sts__avg_type_signed__init
                     (Sts__AvgTypeSigned         *message);
size_t sts__avg_type_signed__get_packed_size
                     (const Sts__AvgTypeSigned   *message);
size_t sts__avg_type_signed__pack
                     (const Sts__AvgTypeSigned   *message,
                      uint8_t             *out);
size_t sts__avg_type_signed__pack_to_buffer
                     (const Sts__AvgTypeSigned   *message,
                      ProtobufCBuffer     *buffer);
Sts__AvgTypeSigned *
       sts__avg_type_signed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__avg_type_signed__free_unpacked
                     (Sts__AvgTypeSigned *message,
                      ProtobufCAllocator *allocator);
/* Sts__Neighbor__NeighborBss methods */
void   sts__neighbor__neighbor_bss__init
                     (Sts__Neighbor__NeighborBss         *message);
/* Sts__Neighbor methods */
void   sts__neighbor__init
                     (Sts__Neighbor         *message);
size_t sts__neighbor__get_packed_size
                     (const Sts__Neighbor   *message);
size_t sts__neighbor__pack
                     (const Sts__Neighbor   *message,
                      uint8_t             *out);
size_t sts__neighbor__pack_to_buffer
                     (const Sts__Neighbor   *message,
                      ProtobufCBuffer     *buffer);
Sts__Neighbor *
       sts__neighbor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__neighbor__free_unpacked
                     (Sts__Neighbor *message,
                      ProtobufCAllocator *allocator);
/* Sts__Client__Stats methods */
void   sts__client__stats__init
                     (Sts__Client__Stats         *message);
/* Sts__Client__RxStats__ChainRSSI methods */
void   sts__client__rx_stats__chain_rssi__init
                     (Sts__Client__RxStats__ChainRSSI         *message);
/* Sts__Client__RxStats methods */
void   sts__client__rx_stats__init
                     (Sts__Client__RxStats         *message);
/* Sts__Client__TxStats methods */
void   sts__client__tx_stats__init
                     (Sts__Client__TxStats         *message);
/* Sts__Client__TidStats__Sojourn methods */
void   sts__client__tid_stats__sojourn__init
                     (Sts__Client__TidStats__Sojourn         *message);
/* Sts__Client__TidStats methods */
void   sts__client__tid_stats__init
                     (Sts__Client__TidStats         *message);
/* Sts__Client methods */
void   sts__client__init
                     (Sts__Client         *message);
size_t sts__client__get_packed_size
                     (const Sts__Client   *message);
size_t sts__client__pack
                     (const Sts__Client   *message,
                      uint8_t             *out);
size_t sts__client__pack_to_buffer
                     (const Sts__Client   *message,
                      ProtobufCBuffer     *buffer);
Sts__Client *
       sts__client__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__client__free_unpacked
                     (Sts__Client *message,
                      ProtobufCAllocator *allocator);
/* Sts__ClientReport methods */
void   sts__client_report__init
                     (Sts__ClientReport         *message);
size_t sts__client_report__get_packed_size
                     (const Sts__ClientReport   *message);
size_t sts__client_report__pack
                     (const Sts__ClientReport   *message,
                      uint8_t             *out);
size_t sts__client_report__pack_to_buffer
                     (const Sts__ClientReport   *message,
                      ProtobufCBuffer     *buffer);
Sts__ClientReport *
       sts__client_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__client_report__free_unpacked
                     (Sts__ClientReport *message,
                      ProtobufCAllocator *allocator);
/* Sts__Survey__SurveySample methods */
void   sts__survey__survey_sample__init
                     (Sts__Survey__SurveySample         *message);
/* Sts__Survey__SurveyAvg methods */
void   sts__survey__survey_avg__init
                     (Sts__Survey__SurveyAvg         *message);
/* Sts__Survey methods */
void   sts__survey__init
                     (Sts__Survey         *message);
size_t sts__survey__get_packed_size
                     (const Sts__Survey   *message);
size_t sts__survey__pack
                     (const Sts__Survey   *message,
                      uint8_t             *out);
size_t sts__survey__pack_to_buffer
                     (const Sts__Survey   *message,
                      ProtobufCBuffer     *buffer);
Sts__Survey *
       sts__survey__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__survey__free_unpacked
                     (Sts__Survey *message,
                      ProtobufCAllocator *allocator);
/* Sts__Capacity__QueueSample methods */
void   sts__capacity__queue_sample__init
                     (Sts__Capacity__QueueSample         *message);
/* Sts__Capacity methods */
void   sts__capacity__init
                     (Sts__Capacity         *message);
size_t sts__capacity__get_packed_size
                     (const Sts__Capacity   *message);
size_t sts__capacity__pack
                     (const Sts__Capacity   *message,
                      uint8_t             *out);
size_t sts__capacity__pack_to_buffer
                     (const Sts__Capacity   *message,
                      ProtobufCBuffer     *buffer);
Sts__Capacity *
       sts__capacity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__capacity__free_unpacked
                     (Sts__Capacity *message,
                      ProtobufCAllocator *allocator);
/* Sts__Device__LoadAvg methods */
void   sts__device__load_avg__init
                     (Sts__Device__LoadAvg         *message);
/* Sts__Device__RadioTemp methods */
void   sts__device__radio_temp__init
                     (Sts__Device__RadioTemp         *message);
/* Sts__Device__Thermal__RadioTxChainMask methods */
void   sts__device__thermal__radio_tx_chain_mask__init
                     (Sts__Device__Thermal__RadioTxChainMask         *message);
/* Sts__Device__Thermal methods */
void   sts__device__thermal__init
                     (Sts__Device__Thermal         *message);
/* Sts__Device__MemUtil methods */
void   sts__device__mem_util__init
                     (Sts__Device__MemUtil         *message);
/* Sts__Device__FsUtil methods */
void   sts__device__fs_util__init
                     (Sts__Device__FsUtil         *message);
/* Sts__Device__CpuUtil methods */
void   sts__device__cpu_util__init
                     (Sts__Device__CpuUtil         *message);
/* Sts__Device__PerProcessUtil methods */
void   sts__device__per_process_util__init
                     (Sts__Device__PerProcessUtil         *message);
/* Sts__Device methods */
void   sts__device__init
                     (Sts__Device         *message);
size_t sts__device__get_packed_size
                     (const Sts__Device   *message);
size_t sts__device__pack
                     (const Sts__Device   *message,
                      uint8_t             *out);
size_t sts__device__pack_to_buffer
                     (const Sts__Device   *message,
                      ProtobufCBuffer     *buffer);
Sts__Device *
       sts__device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__device__free_unpacked
                     (Sts__Device *message,
                      ProtobufCAllocator *allocator);
/* Sts__BSClient__BSEvent methods */
void   sts__bsclient__bsevent__init
                     (Sts__BSClient__BSEvent         *message);
/* Sts__BSClient__BSBandReport methods */
void   sts__bsclient__bsband_report__init
                     (Sts__BSClient__BSBandReport         *message);
/* Sts__BSClient methods */
void   sts__bsclient__init
                     (Sts__BSClient         *message);
size_t sts__bsclient__get_packed_size
                     (const Sts__BSClient   *message);
size_t sts__bsclient__pack
                     (const Sts__BSClient   *message,
                      uint8_t             *out);
size_t sts__bsclient__pack_to_buffer
                     (const Sts__BSClient   *message,
                      ProtobufCBuffer     *buffer);
Sts__BSClient *
       sts__bsclient__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__bsclient__free_unpacked
                     (Sts__BSClient *message,
                      ProtobufCAllocator *allocator);
/* Sts__BSReport methods */
void   sts__bsreport__init
                     (Sts__BSReport         *message);
size_t sts__bsreport__get_packed_size
                     (const Sts__BSReport   *message);
size_t sts__bsreport__pack
                     (const Sts__BSReport   *message,
                      uint8_t             *out);
size_t sts__bsreport__pack_to_buffer
                     (const Sts__BSReport   *message,
                      ProtobufCBuffer     *buffer);
Sts__BSReport *
       sts__bsreport__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__bsreport__free_unpacked
                     (Sts__BSReport *message,
                      ProtobufCAllocator *allocator);
/* Sts__RssiPeer__RssiSample methods */
void   sts__rssi_peer__rssi_sample__init
                     (Sts__RssiPeer__RssiSample         *message);
/* Sts__RssiPeer methods */
void   sts__rssi_peer__init
                     (Sts__RssiPeer         *message);
size_t sts__rssi_peer__get_packed_size
                     (const Sts__RssiPeer   *message);
size_t sts__rssi_peer__pack
                     (const Sts__RssiPeer   *message,
                      uint8_t             *out);
size_t sts__rssi_peer__pack_to_buffer
                     (const Sts__RssiPeer   *message,
                      ProtobufCBuffer     *buffer);
Sts__RssiPeer *
       sts__rssi_peer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__rssi_peer__free_unpacked
                     (Sts__RssiPeer *message,
                      ProtobufCAllocator *allocator);
/* Sts__RssiReport methods */
void   sts__rssi_report__init
                     (Sts__RssiReport         *message);
size_t sts__rssi_report__get_packed_size
                     (const Sts__RssiReport   *message);
size_t sts__rssi_report__pack
                     (const Sts__RssiReport   *message,
                      uint8_t             *out);
size_t sts__rssi_report__pack_to_buffer
                     (const Sts__RssiReport   *message,
                      ProtobufCBuffer     *buffer);
Sts__RssiReport *
       sts__rssi_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__rssi_report__free_unpacked
                     (Sts__RssiReport *message,
                      ProtobufCAllocator *allocator);
/* Sts__Report methods */
void   sts__report__init
                     (Sts__Report         *message);
size_t sts__report__get_packed_size
                     (const Sts__Report   *message);
size_t sts__report__pack
                     (const Sts__Report   *message,
                      uint8_t             *out);
size_t sts__report__pack_to_buffer
                     (const Sts__Report   *message,
                      ProtobufCBuffer     *buffer);
Sts__Report *
       sts__report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__report__free_unpacked
                     (Sts__Report *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Sts__AvgType_Closure)
                 (const Sts__AvgType *message,
                  void *closure_data);
typedef void (*Sts__AvgTypeSigned_Closure)
                 (const Sts__AvgTypeSigned *message,
                  void *closure_data);
typedef void (*Sts__Neighbor__NeighborBss_Closure)
                 (const Sts__Neighbor__NeighborBss *message,
                  void *closure_data);
typedef void (*Sts__Neighbor_Closure)
                 (const Sts__Neighbor *message,
                  void *closure_data);
typedef void (*Sts__Client__Stats_Closure)
                 (const Sts__Client__Stats *message,
                  void *closure_data);
typedef void (*Sts__Client__RxStats__ChainRSSI_Closure)
                 (const Sts__Client__RxStats__ChainRSSI *message,
                  void *closure_data);
typedef void (*Sts__Client__RxStats_Closure)
                 (const Sts__Client__RxStats *message,
                  void *closure_data);
typedef void (*Sts__Client__TxStats_Closure)
                 (const Sts__Client__TxStats *message,
                  void *closure_data);
typedef void (*Sts__Client__TidStats__Sojourn_Closure)
                 (const Sts__Client__TidStats__Sojourn *message,
                  void *closure_data);
typedef void (*Sts__Client__TidStats_Closure)
                 (const Sts__Client__TidStats *message,
                  void *closure_data);
typedef void (*Sts__Client_Closure)
                 (const Sts__Client *message,
                  void *closure_data);
typedef void (*Sts__ClientReport_Closure)
                 (const Sts__ClientReport *message,
                  void *closure_data);
typedef void (*Sts__Survey__SurveySample_Closure)
                 (const Sts__Survey__SurveySample *message,
                  void *closure_data);
typedef void (*Sts__Survey__SurveyAvg_Closure)
                 (const Sts__Survey__SurveyAvg *message,
                  void *closure_data);
typedef void (*Sts__Survey_Closure)
                 (const Sts__Survey *message,
                  void *closure_data);
typedef void (*Sts__Capacity__QueueSample_Closure)
                 (const Sts__Capacity__QueueSample *message,
                  void *closure_data);
typedef void (*Sts__Capacity_Closure)
                 (const Sts__Capacity *message,
                  void *closure_data);
typedef void (*Sts__Device__LoadAvg_Closure)
                 (const Sts__Device__LoadAvg *message,
                  void *closure_data);
typedef void (*Sts__Device__RadioTemp_Closure)
                 (const Sts__Device__RadioTemp *message,
                  void *closure_data);
typedef void (*Sts__Device__Thermal__RadioTxChainMask_Closure)
                 (const Sts__Device__Thermal__RadioTxChainMask *message,
                  void *closure_data);
typedef void (*Sts__Device__Thermal_Closure)
                 (const Sts__Device__Thermal *message,
                  void *closure_data);
typedef void (*Sts__Device__MemUtil_Closure)
                 (const Sts__Device__MemUtil *message,
                  void *closure_data);
typedef void (*Sts__Device__FsUtil_Closure)
                 (const Sts__Device__FsUtil *message,
                  void *closure_data);
typedef void (*Sts__Device__CpuUtil_Closure)
                 (const Sts__Device__CpuUtil *message,
                  void *closure_data);
typedef void (*Sts__Device__PerProcessUtil_Closure)
                 (const Sts__Device__PerProcessUtil *message,
                  void *closure_data);
typedef void (*Sts__Device_Closure)
                 (const Sts__Device *message,
                  void *closure_data);
typedef void (*Sts__BSClient__BSEvent_Closure)
                 (const Sts__BSClient__BSEvent *message,
                  void *closure_data);
typedef void (*Sts__BSClient__BSBandReport_Closure)
                 (const Sts__BSClient__BSBandReport *message,
                  void *closure_data);
typedef void (*Sts__BSClient_Closure)
                 (const Sts__BSClient *message,
                  void *closure_data);
typedef void (*Sts__BSReport_Closure)
                 (const Sts__BSReport *message,
                  void *closure_data);
typedef void (*Sts__RssiPeer__RssiSample_Closure)
                 (const Sts__RssiPeer__RssiSample *message,
                  void *closure_data);
typedef void (*Sts__RssiPeer_Closure)
                 (const Sts__RssiPeer *message,
                  void *closure_data);
typedef void (*Sts__RssiReport_Closure)
                 (const Sts__RssiReport *message,
                  void *closure_data);
typedef void (*Sts__Report_Closure)
                 (const Sts__Report *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    sts__radio_band_type__descriptor;
extern const ProtobufCEnumDescriptor    sts__survey_type__descriptor;
extern const ProtobufCEnumDescriptor    sts__neighbor_type__descriptor;
extern const ProtobufCEnumDescriptor    sts__chan_width__descriptor;
extern const ProtobufCEnumDescriptor    sts__wmm_ac__descriptor;
extern const ProtobufCEnumDescriptor    sts__bsevent_type__descriptor;
extern const ProtobufCEnumDescriptor    sts__disconnect_src__descriptor;
extern const ProtobufCEnumDescriptor    sts__disconnect_type__descriptor;
extern const ProtobufCEnumDescriptor    sts__report_type__descriptor;
extern const ProtobufCEnumDescriptor    sts__fs_type__descriptor;
extern const ProtobufCEnumDescriptor    sts__diff_type__descriptor;
extern const ProtobufCMessageDescriptor sts__avg_type__descriptor;
extern const ProtobufCMessageDescriptor sts__avg_type_signed__descriptor;
extern const ProtobufCMessageDescriptor sts__neighbor__descriptor;
extern const ProtobufCMessageDescriptor sts__neighbor__neighbor_bss__descriptor;
extern const ProtobufCMessageDescriptor sts__client__descriptor;
extern const ProtobufCMessageDescriptor sts__client__stats__descriptor;
extern const ProtobufCMessageDescriptor sts__client__rx_stats__descriptor;
extern const ProtobufCMessageDescriptor sts__client__rx_stats__chain_rssi__descriptor;
extern const ProtobufCMessageDescriptor sts__client__tx_stats__descriptor;
extern const ProtobufCMessageDescriptor sts__client__tid_stats__descriptor;
extern const ProtobufCMessageDescriptor sts__client__tid_stats__sojourn__descriptor;
extern const ProtobufCMessageDescriptor sts__client_report__descriptor;
extern const ProtobufCMessageDescriptor sts__survey__descriptor;
extern const ProtobufCMessageDescriptor sts__survey__survey_sample__descriptor;
extern const ProtobufCMessageDescriptor sts__survey__survey_avg__descriptor;
extern const ProtobufCMessageDescriptor sts__capacity__descriptor;
extern const ProtobufCMessageDescriptor sts__capacity__queue_sample__descriptor;
extern const ProtobufCMessageDescriptor sts__device__descriptor;
extern const ProtobufCMessageDescriptor sts__device__load_avg__descriptor;
extern const ProtobufCMessageDescriptor sts__device__radio_temp__descriptor;
extern const ProtobufCMessageDescriptor sts__device__thermal__descriptor;
extern const ProtobufCMessageDescriptor sts__device__thermal__radio_tx_chain_mask__descriptor;
extern const ProtobufCMessageDescriptor sts__device__mem_util__descriptor;
extern const ProtobufCMessageDescriptor sts__device__fs_util__descriptor;
extern const ProtobufCMessageDescriptor sts__device__cpu_util__descriptor;
extern const ProtobufCMessageDescriptor sts__device__per_process_util__descriptor;
extern const ProtobufCMessageDescriptor sts__bsclient__descriptor;
extern const ProtobufCMessageDescriptor sts__bsclient__bsevent__descriptor;
extern const ProtobufCMessageDescriptor sts__bsclient__bsband_report__descriptor;
extern const ProtobufCMessageDescriptor sts__bsreport__descriptor;
extern const ProtobufCMessageDescriptor sts__rssi_peer__descriptor;
extern const ProtobufCMessageDescriptor sts__rssi_peer__rssi_sample__descriptor;
extern const ProtobufCEnumDescriptor    sts__rssi_peer__rssi_source__descriptor;
extern const ProtobufCMessageDescriptor sts__rssi_report__descriptor;
extern const ProtobufCMessageDescriptor sts__report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_opensync_5fstats_2eproto__INCLUDED */
