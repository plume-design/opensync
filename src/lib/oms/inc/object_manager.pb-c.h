/*
Copyright (c) 2015, Plume Design Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the Plume Design Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: object_manager.proto */

#ifndef PROTOBUF_C_object_5fmanager_2eproto__INCLUDED
#define PROTOBUF_C_object_5fmanager_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ObjectManager__Status__ObservationPoint ObjectManager__Status__ObservationPoint;
typedef struct _ObjectManager__Status__ObjectStatus ObjectManager__Status__ObjectStatus;
typedef struct _ObjectManager__Status__ObjectStatusReport ObjectManager__Status__ObjectStatusReport;


/* --- enums --- */


/* --- messages --- */

struct  _ObjectManager__Status__ObservationPoint
{
  ProtobufCMessage base;
  char *nodeid;
  char *locationid;
};
#define OBJECT_MANAGER__STATUS__OBSERVATION_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&object_manager__status__observation_point__descriptor) \
    , NULL, NULL }


struct  _ObjectManager__Status__ObjectStatus
{
  ProtobufCMessage base;
  char *objectname;
  char *version;
  char *status;
};
#define OBJECT_MANAGER__STATUS__OBJECT_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&object_manager__status__object_status__descriptor) \
    , NULL, NULL, NULL }


struct  _ObjectManager__Status__ObjectStatusReport
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reportedat;
  uint64_t reportedat;
  ObjectManager__Status__ObservationPoint *observationpoint;
  size_t n_objectstatus;
  ObjectManager__Status__ObjectStatus **objectstatus;
};
#define OBJECT_MANAGER__STATUS__OBJECT_STATUS_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&object_manager__status__object_status_report__descriptor) \
    , 0, 0, NULL, 0,NULL }


/* ObjectManager__Status__ObservationPoint methods */
void   object_manager__status__observation_point__init
                     (ObjectManager__Status__ObservationPoint         *message);
size_t object_manager__status__observation_point__get_packed_size
                     (const ObjectManager__Status__ObservationPoint   *message);
size_t object_manager__status__observation_point__pack
                     (const ObjectManager__Status__ObservationPoint   *message,
                      uint8_t             *out);
size_t object_manager__status__observation_point__pack_to_buffer
                     (const ObjectManager__Status__ObservationPoint   *message,
                      ProtobufCBuffer     *buffer);
ObjectManager__Status__ObservationPoint *
       object_manager__status__observation_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   object_manager__status__observation_point__free_unpacked
                     (ObjectManager__Status__ObservationPoint *message,
                      ProtobufCAllocator *allocator);
/* ObjectManager__Status__ObjectStatus methods */
void   object_manager__status__object_status__init
                     (ObjectManager__Status__ObjectStatus         *message);
size_t object_manager__status__object_status__get_packed_size
                     (const ObjectManager__Status__ObjectStatus   *message);
size_t object_manager__status__object_status__pack
                     (const ObjectManager__Status__ObjectStatus   *message,
                      uint8_t             *out);
size_t object_manager__status__object_status__pack_to_buffer
                     (const ObjectManager__Status__ObjectStatus   *message,
                      ProtobufCBuffer     *buffer);
ObjectManager__Status__ObjectStatus *
       object_manager__status__object_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   object_manager__status__object_status__free_unpacked
                     (ObjectManager__Status__ObjectStatus *message,
                      ProtobufCAllocator *allocator);
/* ObjectManager__Status__ObjectStatusReport methods */
void   object_manager__status__object_status_report__init
                     (ObjectManager__Status__ObjectStatusReport         *message);
size_t object_manager__status__object_status_report__get_packed_size
                     (const ObjectManager__Status__ObjectStatusReport   *message);
size_t object_manager__status__object_status_report__pack
                     (const ObjectManager__Status__ObjectStatusReport   *message,
                      uint8_t             *out);
size_t object_manager__status__object_status_report__pack_to_buffer
                     (const ObjectManager__Status__ObjectStatusReport   *message,
                      ProtobufCBuffer     *buffer);
ObjectManager__Status__ObjectStatusReport *
       object_manager__status__object_status_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   object_manager__status__object_status_report__free_unpacked
                     (ObjectManager__Status__ObjectStatusReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ObjectManager__Status__ObservationPoint_Closure)
                 (const ObjectManager__Status__ObservationPoint *message,
                  void *closure_data);
typedef void (*ObjectManager__Status__ObjectStatus_Closure)
                 (const ObjectManager__Status__ObjectStatus *message,
                  void *closure_data);
typedef void (*ObjectManager__Status__ObjectStatusReport_Closure)
                 (const ObjectManager__Status__ObjectStatusReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor object_manager__status__observation_point__descriptor;
extern const ProtobufCMessageDescriptor object_manager__status__object_status__descriptor;
extern const ProtobufCMessageDescriptor object_manager__status__object_status_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_object_5fmanager_2eproto__INCLUDED */
