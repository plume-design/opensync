/*
Copyright (c) 2015, Plume Design Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the Plume Design Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: network_metadata.proto */

#ifndef PROTOBUF_C_network_5fmetadata_2eproto__INCLUDED
#define PROTOBUF_C_network_5fmetadata_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Traffic__ObservationPoint Traffic__ObservationPoint;
typedef struct _Traffic__VendorDataKVPair Traffic__VendorDataKVPair;
typedef struct _Traffic__VendorData Traffic__VendorData;
typedef struct _Traffic__FlowTags Traffic__FlowTags;
typedef struct _Traffic__FlowState Traffic__FlowState;
typedef struct _Traffic__FlowKey Traffic__FlowKey;
typedef struct _Traffic__FlowCounters Traffic__FlowCounters;
typedef struct _Traffic__FlowStats Traffic__FlowStats;
typedef struct _Traffic__ObservationWindow Traffic__ObservationWindow;
typedef struct _Traffic__FlowReport Traffic__FlowReport;


/* --- enums --- */


/* --- messages --- */

struct  _Traffic__ObservationPoint
{
  ProtobufCMessage base;
  char *nodeid;
  char *locationid;
};
#define TRAFFIC__OBSERVATION_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&traffic__observation_point__descriptor) \
    , NULL, NULL }


struct  _Traffic__VendorDataKVPair
{
  ProtobufCMessage base;
  char *key;
  char *val_str;
  protobuf_c_boolean has_val_u32;
  uint32_t val_u32;
  protobuf_c_boolean has_val_u64;
  uint64_t val_u64;
};
#define TRAFFIC__VENDOR_DATA__KVPAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&traffic__vendor_data__kvpair__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


struct  _Traffic__VendorData
{
  ProtobufCMessage base;
  char *vendor;
  size_t n_vendorkvpair;
  Traffic__VendorDataKVPair **vendorkvpair;
};
#define TRAFFIC__VENDOR_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&traffic__vendor_data__descriptor) \
    , NULL, 0,NULL }


struct  _Traffic__FlowTags
{
  ProtobufCMessage base;
  char *vendor;
  char *appname;
  size_t n_apptags;
  char **apptags;
};
#define TRAFFIC__FLOW_TAGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&traffic__flow_tags__descriptor) \
    , NULL, NULL, 0,NULL }


struct  _Traffic__FlowState
{
  ProtobufCMessage base;
  protobuf_c_boolean has_firstobservedat;
  uint64_t firstobservedat;
  protobuf_c_boolean has_lastobservedat;
  uint64_t lastobservedat;
  protobuf_c_boolean has_flowstart;
  protobuf_c_boolean flowstart;
  protobuf_c_boolean has_flowend;
  protobuf_c_boolean flowend;
};
#define TRAFFIC__FLOW_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&traffic__flow_state__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _Traffic__FlowKey
{
  ProtobufCMessage base;
  char *srcmac;
  char *dstmac;
  protobuf_c_boolean has_vlanid;
  uint32_t vlanid;
  protobuf_c_boolean has_ethertype;
  uint32_t ethertype;
  char *srcip;
  char *dstip;
  protobuf_c_boolean has_ipprotocol;
  uint32_t ipprotocol;
  protobuf_c_boolean has_tptsrcport;
  uint32_t tptsrcport;
  protobuf_c_boolean has_tptdstport;
  uint32_t tptdstport;
  size_t n_flowtags;
  Traffic__FlowTags **flowtags;
  size_t n_vendordata;
  Traffic__VendorData **vendordata;
  Traffic__FlowState *flowstate;
  protobuf_c_boolean has_parentofsrcmac;
  protobuf_c_boolean parentofsrcmac;
  protobuf_c_boolean has_parentofdstmac;
  protobuf_c_boolean parentofdstmac;
};
#define TRAFFIC__FLOW_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&traffic__flow_key__descriptor) \
    , NULL, NULL, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, NULL, 0,0, 0,0 }


struct  _Traffic__FlowCounters
{
  ProtobufCMessage base;
  protobuf_c_boolean has_packetscount;
  uint64_t packetscount;
  protobuf_c_boolean has_bytescount;
  uint64_t bytescount;
};
#define TRAFFIC__FLOW_COUNTERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&traffic__flow_counters__descriptor) \
    , 0,0, 0,0 }


struct  _Traffic__FlowStats
{
  ProtobufCMessage base;
  Traffic__FlowKey *flowkey;
  Traffic__FlowCounters *flowcount;
};
#define TRAFFIC__FLOW_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&traffic__flow_stats__descriptor) \
    , NULL, NULL }


struct  _Traffic__ObservationWindow
{
  ProtobufCMessage base;
  protobuf_c_boolean has_startedat;
  uint64_t startedat;
  protobuf_c_boolean has_endedat;
  uint64_t endedat;
  size_t n_flowstats;
  Traffic__FlowStats **flowstats;
  protobuf_c_boolean has_droppedflows;
  uint32_t droppedflows;
};
#define TRAFFIC__OBSERVATION_WINDOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&traffic__observation_window__descriptor) \
    , 0,0, 0,0, 0,NULL, 0,0 }


struct  _Traffic__FlowReport
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reportedat;
  uint64_t reportedat;
  Traffic__ObservationPoint *observationpoint;
  size_t n_observationwindow;
  Traffic__ObservationWindow **observationwindow;
};
#define TRAFFIC__FLOW_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&traffic__flow_report__descriptor) \
    , 0,0, NULL, 0,NULL }


/* Traffic__ObservationPoint methods */
void   traffic__observation_point__init
                     (Traffic__ObservationPoint         *message);
size_t traffic__observation_point__get_packed_size
                     (const Traffic__ObservationPoint   *message);
size_t traffic__observation_point__pack
                     (const Traffic__ObservationPoint   *message,
                      uint8_t             *out);
size_t traffic__observation_point__pack_to_buffer
                     (const Traffic__ObservationPoint   *message,
                      ProtobufCBuffer     *buffer);
Traffic__ObservationPoint *
       traffic__observation_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   traffic__observation_point__free_unpacked
                     (Traffic__ObservationPoint *message,
                      ProtobufCAllocator *allocator);
/* Traffic__VendorDataKVPair methods */
void   traffic__vendor_data__kvpair__init
                     (Traffic__VendorDataKVPair         *message);
size_t traffic__vendor_data__kvpair__get_packed_size
                     (const Traffic__VendorDataKVPair   *message);
size_t traffic__vendor_data__kvpair__pack
                     (const Traffic__VendorDataKVPair   *message,
                      uint8_t             *out);
size_t traffic__vendor_data__kvpair__pack_to_buffer
                     (const Traffic__VendorDataKVPair   *message,
                      ProtobufCBuffer     *buffer);
Traffic__VendorDataKVPair *
       traffic__vendor_data__kvpair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   traffic__vendor_data__kvpair__free_unpacked
                     (Traffic__VendorDataKVPair *message,
                      ProtobufCAllocator *allocator);
/* Traffic__VendorData methods */
void   traffic__vendor_data__init
                     (Traffic__VendorData         *message);
size_t traffic__vendor_data__get_packed_size
                     (const Traffic__VendorData   *message);
size_t traffic__vendor_data__pack
                     (const Traffic__VendorData   *message,
                      uint8_t             *out);
size_t traffic__vendor_data__pack_to_buffer
                     (const Traffic__VendorData   *message,
                      ProtobufCBuffer     *buffer);
Traffic__VendorData *
       traffic__vendor_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   traffic__vendor_data__free_unpacked
                     (Traffic__VendorData *message,
                      ProtobufCAllocator *allocator);
/* Traffic__FlowTags methods */
void   traffic__flow_tags__init
                     (Traffic__FlowTags         *message);
size_t traffic__flow_tags__get_packed_size
                     (const Traffic__FlowTags   *message);
size_t traffic__flow_tags__pack
                     (const Traffic__FlowTags   *message,
                      uint8_t             *out);
size_t traffic__flow_tags__pack_to_buffer
                     (const Traffic__FlowTags   *message,
                      ProtobufCBuffer     *buffer);
Traffic__FlowTags *
       traffic__flow_tags__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   traffic__flow_tags__free_unpacked
                     (Traffic__FlowTags *message,
                      ProtobufCAllocator *allocator);
/* Traffic__FlowState methods */
void   traffic__flow_state__init
                     (Traffic__FlowState         *message);
size_t traffic__flow_state__get_packed_size
                     (const Traffic__FlowState   *message);
size_t traffic__flow_state__pack
                     (const Traffic__FlowState   *message,
                      uint8_t             *out);
size_t traffic__flow_state__pack_to_buffer
                     (const Traffic__FlowState   *message,
                      ProtobufCBuffer     *buffer);
Traffic__FlowState *
       traffic__flow_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   traffic__flow_state__free_unpacked
                     (Traffic__FlowState *message,
                      ProtobufCAllocator *allocator);
/* Traffic__FlowKey methods */
void   traffic__flow_key__init
                     (Traffic__FlowKey         *message);
size_t traffic__flow_key__get_packed_size
                     (const Traffic__FlowKey   *message);
size_t traffic__flow_key__pack
                     (const Traffic__FlowKey   *message,
                      uint8_t             *out);
size_t traffic__flow_key__pack_to_buffer
                     (const Traffic__FlowKey   *message,
                      ProtobufCBuffer     *buffer);
Traffic__FlowKey *
       traffic__flow_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   traffic__flow_key__free_unpacked
                     (Traffic__FlowKey *message,
                      ProtobufCAllocator *allocator);
/* Traffic__FlowCounters methods */
void   traffic__flow_counters__init
                     (Traffic__FlowCounters         *message);
size_t traffic__flow_counters__get_packed_size
                     (const Traffic__FlowCounters   *message);
size_t traffic__flow_counters__pack
                     (const Traffic__FlowCounters   *message,
                      uint8_t             *out);
size_t traffic__flow_counters__pack_to_buffer
                     (const Traffic__FlowCounters   *message,
                      ProtobufCBuffer     *buffer);
Traffic__FlowCounters *
       traffic__flow_counters__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   traffic__flow_counters__free_unpacked
                     (Traffic__FlowCounters *message,
                      ProtobufCAllocator *allocator);
/* Traffic__FlowStats methods */
void   traffic__flow_stats__init
                     (Traffic__FlowStats         *message);
size_t traffic__flow_stats__get_packed_size
                     (const Traffic__FlowStats   *message);
size_t traffic__flow_stats__pack
                     (const Traffic__FlowStats   *message,
                      uint8_t             *out);
size_t traffic__flow_stats__pack_to_buffer
                     (const Traffic__FlowStats   *message,
                      ProtobufCBuffer     *buffer);
Traffic__FlowStats *
       traffic__flow_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   traffic__flow_stats__free_unpacked
                     (Traffic__FlowStats *message,
                      ProtobufCAllocator *allocator);
/* Traffic__ObservationWindow methods */
void   traffic__observation_window__init
                     (Traffic__ObservationWindow         *message);
size_t traffic__observation_window__get_packed_size
                     (const Traffic__ObservationWindow   *message);
size_t traffic__observation_window__pack
                     (const Traffic__ObservationWindow   *message,
                      uint8_t             *out);
size_t traffic__observation_window__pack_to_buffer
                     (const Traffic__ObservationWindow   *message,
                      ProtobufCBuffer     *buffer);
Traffic__ObservationWindow *
       traffic__observation_window__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   traffic__observation_window__free_unpacked
                     (Traffic__ObservationWindow *message,
                      ProtobufCAllocator *allocator);
/* Traffic__FlowReport methods */
void   traffic__flow_report__init
                     (Traffic__FlowReport         *message);
size_t traffic__flow_report__get_packed_size
                     (const Traffic__FlowReport   *message);
size_t traffic__flow_report__pack
                     (const Traffic__FlowReport   *message,
                      uint8_t             *out);
size_t traffic__flow_report__pack_to_buffer
                     (const Traffic__FlowReport   *message,
                      ProtobufCBuffer     *buffer);
Traffic__FlowReport *
       traffic__flow_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   traffic__flow_report__free_unpacked
                     (Traffic__FlowReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Traffic__ObservationPoint_Closure)
                 (const Traffic__ObservationPoint *message,
                  void *closure_data);
typedef void (*Traffic__VendorDataKVPair_Closure)
                 (const Traffic__VendorDataKVPair *message,
                  void *closure_data);
typedef void (*Traffic__VendorData_Closure)
                 (const Traffic__VendorData *message,
                  void *closure_data);
typedef void (*Traffic__FlowTags_Closure)
                 (const Traffic__FlowTags *message,
                  void *closure_data);
typedef void (*Traffic__FlowState_Closure)
                 (const Traffic__FlowState *message,
                  void *closure_data);
typedef void (*Traffic__FlowKey_Closure)
                 (const Traffic__FlowKey *message,
                  void *closure_data);
typedef void (*Traffic__FlowCounters_Closure)
                 (const Traffic__FlowCounters *message,
                  void *closure_data);
typedef void (*Traffic__FlowStats_Closure)
                 (const Traffic__FlowStats *message,
                  void *closure_data);
typedef void (*Traffic__ObservationWindow_Closure)
                 (const Traffic__ObservationWindow *message,
                  void *closure_data);
typedef void (*Traffic__FlowReport_Closure)
                 (const Traffic__FlowReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor traffic__observation_point__descriptor;
extern const ProtobufCMessageDescriptor traffic__vendor_data__kvpair__descriptor;
extern const ProtobufCMessageDescriptor traffic__vendor_data__descriptor;
extern const ProtobufCMessageDescriptor traffic__flow_tags__descriptor;
extern const ProtobufCMessageDescriptor traffic__flow_state__descriptor;
extern const ProtobufCMessageDescriptor traffic__flow_key__descriptor;
extern const ProtobufCMessageDescriptor traffic__flow_counters__descriptor;
extern const ProtobufCMessageDescriptor traffic__flow_stats__descriptor;
extern const ProtobufCMessageDescriptor traffic__observation_window__descriptor;
extern const ProtobufCMessageDescriptor traffic__flow_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_network_5fmetadata_2eproto__INCLUDED */
