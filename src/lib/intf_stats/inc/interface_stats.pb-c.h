/*
Copyright (c) 2015, Plume Design Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the Plume Design Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: interface_stats.proto */

#ifndef PROTOBUF_C_interface_5fstats_2eproto__INCLUDED
#define PROTOBUF_C_interface_5fstats_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Intf__Stats__ObservationPoint Intf__Stats__ObservationPoint;
typedef struct _Intf__Stats__IntfStats Intf__Stats__IntfStats;
typedef struct _Intf__Stats__ObservationWindow Intf__Stats__ObservationWindow;
typedef struct _Intf__Stats__IntfReport Intf__Stats__IntfReport;


/* --- enums --- */


/* --- messages --- */

struct  _Intf__Stats__ObservationPoint
{
  ProtobufCMessage base;
  char *nodeid;
  char *locationid;
};
#define INTF__STATS__OBSERVATION_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&intf__stats__observation_point__descriptor) \
    , NULL, NULL }


struct  _Intf__Stats__IntfStats
{
  ProtobufCMessage base;
  char *ifname;
  protobuf_c_boolean has_txbytes;
  uint64_t txbytes;
  protobuf_c_boolean has_rxbytes;
  uint64_t rxbytes;
  protobuf_c_boolean has_txpackets;
  uint64_t txpackets;
  protobuf_c_boolean has_rxpackets;
  uint64_t rxpackets;
  char *role;
};
#define INTF__STATS__INTF_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&intf__stats__intf_stats__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _Intf__Stats__ObservationWindow
{
  ProtobufCMessage base;
  protobuf_c_boolean has_startedat;
  uint64_t startedat;
  protobuf_c_boolean has_endedat;
  uint64_t endedat;
  size_t n_intfstats;
  Intf__Stats__IntfStats **intfstats;
};
#define INTF__STATS__OBSERVATION_WINDOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&intf__stats__observation_window__descriptor) \
    , 0,0, 0,0, 0,NULL }


struct  _Intf__Stats__IntfReport
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reportedat;
  uint64_t reportedat;
  Intf__Stats__ObservationPoint *observationpoint;
  size_t n_observationwindow;
  Intf__Stats__ObservationWindow **observationwindow;
};
#define INTF__STATS__INTF_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&intf__stats__intf_report__descriptor) \
    , 0,0, NULL, 0,NULL }


/* Intf__Stats__ObservationPoint methods */
void   intf__stats__observation_point__init
                     (Intf__Stats__ObservationPoint         *message);
size_t intf__stats__observation_point__get_packed_size
                     (const Intf__Stats__ObservationPoint   *message);
size_t intf__stats__observation_point__pack
                     (const Intf__Stats__ObservationPoint   *message,
                      uint8_t             *out);
size_t intf__stats__observation_point__pack_to_buffer
                     (const Intf__Stats__ObservationPoint   *message,
                      ProtobufCBuffer     *buffer);
Intf__Stats__ObservationPoint *
       intf__stats__observation_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   intf__stats__observation_point__free_unpacked
                     (Intf__Stats__ObservationPoint *message,
                      ProtobufCAllocator *allocator);
/* Intf__Stats__IntfStats methods */
void   intf__stats__intf_stats__init
                     (Intf__Stats__IntfStats         *message);
size_t intf__stats__intf_stats__get_packed_size
                     (const Intf__Stats__IntfStats   *message);
size_t intf__stats__intf_stats__pack
                     (const Intf__Stats__IntfStats   *message,
                      uint8_t             *out);
size_t intf__stats__intf_stats__pack_to_buffer
                     (const Intf__Stats__IntfStats   *message,
                      ProtobufCBuffer     *buffer);
Intf__Stats__IntfStats *
       intf__stats__intf_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   intf__stats__intf_stats__free_unpacked
                     (Intf__Stats__IntfStats *message,
                      ProtobufCAllocator *allocator);
/* Intf__Stats__ObservationWindow methods */
void   intf__stats__observation_window__init
                     (Intf__Stats__ObservationWindow         *message);
size_t intf__stats__observation_window__get_packed_size
                     (const Intf__Stats__ObservationWindow   *message);
size_t intf__stats__observation_window__pack
                     (const Intf__Stats__ObservationWindow   *message,
                      uint8_t             *out);
size_t intf__stats__observation_window__pack_to_buffer
                     (const Intf__Stats__ObservationWindow   *message,
                      ProtobufCBuffer     *buffer);
Intf__Stats__ObservationWindow *
       intf__stats__observation_window__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   intf__stats__observation_window__free_unpacked
                     (Intf__Stats__ObservationWindow *message,
                      ProtobufCAllocator *allocator);
/* Intf__Stats__IntfReport methods */
void   intf__stats__intf_report__init
                     (Intf__Stats__IntfReport         *message);
size_t intf__stats__intf_report__get_packed_size
                     (const Intf__Stats__IntfReport   *message);
size_t intf__stats__intf_report__pack
                     (const Intf__Stats__IntfReport   *message,
                      uint8_t             *out);
size_t intf__stats__intf_report__pack_to_buffer
                     (const Intf__Stats__IntfReport   *message,
                      ProtobufCBuffer     *buffer);
Intf__Stats__IntfReport *
       intf__stats__intf_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   intf__stats__intf_report__free_unpacked
                     (Intf__Stats__IntfReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Intf__Stats__ObservationPoint_Closure)
                 (const Intf__Stats__ObservationPoint *message,
                  void *closure_data);
typedef void (*Intf__Stats__IntfStats_Closure)
                 (const Intf__Stats__IntfStats *message,
                  void *closure_data);
typedef void (*Intf__Stats__ObservationWindow_Closure)
                 (const Intf__Stats__ObservationWindow *message,
                  void *closure_data);
typedef void (*Intf__Stats__IntfReport_Closure)
                 (const Intf__Stats__IntfReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor intf__stats__observation_point__descriptor;
extern const ProtobufCMessageDescriptor intf__stats__intf_stats__descriptor;
extern const ProtobufCMessageDescriptor intf__stats__observation_window__descriptor;
extern const ProtobufCMessageDescriptor intf__stats__intf_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_interface_5fstats_2eproto__INCLUDED */
