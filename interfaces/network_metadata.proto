// Copyright (c) 2015, Plume Design Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. Neither the name of the Plume Design Inc. nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

package traffic;

message ObservationPoint {
     optional string nodeId                                                 = 1;
     optional string locationId                                             = 2;
}

message VendorData_KVPair {
    optional string key                                                     = 1;
    optional string val_str                                                 = 2;
    optional uint32 val_u32                                                 = 3;
    optional uint64 val_u64                                                 = 4;
}

message VendorData {
    optional string vendor                                                  = 1;
    repeated VendorData_KVPair vendorKVPair                                 = 2;
}

message FlowTags {
    optional string vendor                                                  = 1;
    optional string appName                                                 = 2;
    repeated string appTags                                                 = 10;
}

message FlowState {
    optional uint64 firstObservedAt                                         = 1;
    optional uint64 lastObservedAt                                          = 2;
    optional bool   flowStart                                               = 3;
    optional bool   flowEnd                                                 = 4;
}

message FlowKey {
      optional string srcMac                                                = 1;
      optional string dstMac                                                = 2;
      optional uint32 vlanId                                                = 3;
      optional uint32 etherType                                             = 4;
      optional string srcIp                                                 = 5;
      optional string dstIp                                                 = 6;
      optional uint32 ipProtocol                                            = 7;
      optional uint32 tptSrcPort                                            = 8;
      optional uint32 tptDstPort                                            = 9;
      repeated FlowTags flowTags                                            = 10;
      repeated VendorData vendorData                                        = 11;
      optional FlowState flowState                                          = 12;
      optional bool parentOfSrcMac                                          = 13;
      optional bool parentOfDstMac                                          = 14;
}

message FlowCounters {
      optional uint64  packetsCount                                         = 1;
      optional uint64  bytesCount                                           = 2;
}

message FlowStats {
    optional FlowKey      flowKey                                           = 1;
    optional FlowCounters flowCount                                         = 2;
}

message ObservationWindow {
     optional uint64    startedAt                                           = 1;
     optional uint64    endedAt                                             = 2;
     repeated FlowStats flowStats                                           = 3;
     optional uint32     droppedFlows                                       = 4;
}

message FlowReport {
     optional uint64            reportedAt                                  = 1;
     optional ObservationPoint  observationPoint                            = 2;
     repeated ObservationWindow observationWindow                           = 3;
}
